"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const common_1 = require("@nestjs/common");
class CRUDPersistance {
    constructor(collectionName, dbService) {
        this.collectionName = collectionName;
        this.dbService = dbService;
        const db = this.dbService.getConnection();
        this.collection = db.collection(collectionName);
        this.logger = new common_1.Logger(`${collectionName}_PersistenceService`);
    }
    async getAll() {
        try {
            this.logger.log(`getAll:: fetching ${this.collectionName}`);
            return await this.collection.find({}).toArray();
        }
        catch (error) {
            this.logger.error(`getAll:: error fetching ${this.collectionName}`, error.stack);
            throw error;
        }
    }
    async getById(id) {
        try {
            const mongoId = new mongodb_1.ObjectID(id);
            this.logger.log(`getAll:: fetching document by id ${id} from ${this.collectionName}`);
            return await this.collection.findOne({ _id: mongoId });
        }
        catch (error) {
            this.logger.error(`getAll:: error fetching document by id ${id} from ${this.collectionName}`, error.stack);
            throw error;
        }
    }
    async create(newDocument) {
        try {
            this.logger.log(`create:: creating new document in ${this.collectionName}`);
            const insertResponse = await this.collection.insertOne(newDocument);
            return await this.getById(insertResponse.insertedId.toString());
        }
        catch (error) {
            this.logger.error(`create:: error creating new document in ${this.collectionName}`, error.stack);
            throw error;
        }
    }
    async update(id, documentToUpdate) {
        const mongoId = new mongodb_1.ObjectID(id);
        try {
            this.logger.log(`update:: updating document ${mongoId} in ${this.collectionName}`);
            const updatedDocument = await this.collection.findOneAndUpdate({ _id: mongoId }, documentToUpdate, { returnOriginal: false });
            this.logger.log(`update:: updated document ${mongoId} from ${this.collectionName}`);
            return updatedDocument.value;
        }
        catch (error) {
            this.logger.error(`update error updating document ${mongoId} in ${this.collectionName}`, error.stack);
            throw error;
        }
    }
    async deleteClass(id) {
        try {
            const mongoId = new mongodb_1.ObjectID(id);
            this.logger.log(`delete:: deleting document ${id} from ${this.collectionName}`);
            const deleteResponse = await this.collection.deleteOne({ _id: mongoId });
            this.logger.log(`delete:: removed document ${id} from ${this.collectionName}`);
            return deleteResponse.deletedCount;
        }
        catch (error) {
            this.logger.error(`delete:: error deleting document ${id} from ${this.collectionName}`, error.stack);
            throw error;
        }
    }
}
exports.CRUDPersistance = CRUDPersistance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,