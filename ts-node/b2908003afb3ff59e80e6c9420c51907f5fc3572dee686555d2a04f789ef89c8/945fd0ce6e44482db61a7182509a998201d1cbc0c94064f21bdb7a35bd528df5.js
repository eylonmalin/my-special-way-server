"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Get {
    static getNumber(object, path) {
        return Get.getValue(object, path, 'number');
    }
    static getString(object, path) {
        return Get.getValue(object, path, 'string');
    }
    static getBoolean(object, path) {
        return Get.getValue(object, path, 'boolean');
    }
    static getObject(object, path) {
        return Get.getValue(object, path, 'object');
    }
    static getArray(object, path) {
        return Get.getValue(object, path, 'array');
    }
    static getSymbol(object, path) {
        return Get.getValue(object, path, 'symbol');
    }
    /**
     * Gets the value at path of object.  If the resolved value is undefined, returns undefined.
     * If type is specified, compares the value type to the given type, if match returns the value, otherwise, returns undefined.
     */
    static getValue(object, path, tp) {
        const value = Get.getit(object, path);
        if (value === undefined || !tp) {
            return value;
        }
        if (tp && (typeof value === tp.toLowerCase() || (tp.toLowerCase() === 'array' && Array.isArray(value)))) {
            return value;
        }
        else {
            // console.warn('Get.getValue: input type mismatch; expected ' + tp + ' but found ' + typeof value);
        }
        return undefined;
    }
    static getit(data, path) {
        const pathAarray = path.replace(/\[([0-9]*)]/gim, '.$1').split('.');
        return pathAarray.reduce((prev, next) => {
            if (!prev) {
                return undefined;
            }
            return prev[next];
        }, data);
    }
}
exports.Get = Get;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2R2ZXJub3Zza3kvcHJvZ3JhbW1pbmcvbXktc3BlY2lhbC13YXkvbXktc3BlY2lhbC13YXktc2VydmVyL3NyYy91dGlscy9nZXQudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kdmVybm92c2t5L3Byb2dyYW1taW5nL215LXNwZWNpYWwtd2F5L215LXNwZWNpYWwtd2F5LXNlcnZlci9zcmMvdXRpbHMvZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7SUFFSSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQ3pDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUUsU0FBUyxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQzFDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUUsVUFBVSxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQzNDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQ3pDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQ3hDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQ3pDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsUUFBUSxDQUFJLE1BQWMsRUFBRSxJQUFZLEVBQUcsRUFBVztRQUN6RCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV0QyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDNUIsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckcsT0FBTyxLQUFLLENBQUM7U0FDaEI7YUFBTTtZQUNILG9HQUFvRztTQUN2RztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQVksRUFBRSxJQUFZO1FBQzNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVMsRUFBRSxJQUFTLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE9BQU8sU0FBUyxDQUFDO2FBQ3BCO1lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUVKO0FBeERELGtCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBHZXQge1xuXG4gICAgc3RhdGljIGdldE51bWJlcihvYmplY3Q6IG9iamVjdCwgcGF0aDogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIEdldC5nZXRWYWx1ZShvYmplY3QsIHBhdGgsICdudW1iZXInKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgIGdldFN0cmluZyhvYmplY3Q6IG9iamVjdCwgcGF0aDogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIEdldC5nZXRWYWx1ZShvYmplY3QsIHBhdGgsICdzdHJpbmcnKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgIGdldEJvb2xlYW4ob2JqZWN0OiBvYmplY3QsIHBhdGg6IHN0cmluZyk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gR2V0LmdldFZhbHVlKG9iamVjdCwgcGF0aCwgJ2Jvb2xlYW4nKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0T2JqZWN0KG9iamVjdDogb2JqZWN0LCBwYXRoOiBzdHJpbmcpOiBvYmplY3QgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gR2V0LmdldFZhbHVlKG9iamVjdCwgcGF0aCwgJ29iamVjdCcpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRBcnJheShvYmplY3Q6IG9iamVjdCwgcGF0aDogc3RyaW5nKTogb2JqZWN0IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIEdldC5nZXRWYWx1ZShvYmplY3QsIHBhdGgsICdhcnJheScpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRTeW1ib2wob2JqZWN0OiBvYmplY3QsIHBhdGg6IHN0cmluZyk6IHN5bWJvbCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBHZXQuZ2V0VmFsdWUob2JqZWN0LCBwYXRoLCAnc3ltYm9sJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgcGF0aCBvZiBvYmplY3QuICBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgdW5kZWZpbmVkLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICAgKiBJZiB0eXBlIGlzIHNwZWNpZmllZCwgY29tcGFyZXMgdGhlIHZhbHVlIHR5cGUgdG8gdGhlIGdpdmVuIHR5cGUsIGlmIG1hdGNoIHJldHVybnMgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRWYWx1ZTxUPihvYmplY3Q6IG9iamVjdCwgcGF0aDogc3RyaW5nICwgdHA/OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBHZXQuZ2V0aXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCAhdHApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cCAmJiAodHlwZW9mIHZhbHVlID09PSB0cC50b0xvd2VyQ2FzZSgpIHx8ICh0cC50b0xvd2VyQ2FzZSgpID09PSAnYXJyYXknICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignR2V0LmdldFZhbHVlOiBpbnB1dCB0eXBlIG1pc21hdGNoOyBleHBlY3RlZCAnICsgdHAgKyAnIGJ1dCBmb3VuZCAnICsgdHlwZW9mIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0aXQoZGF0YTogb2JqZWN0LCBwYXRoOiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBjb25zdCBwYXRoQWFycmF5ID0gcGF0aC5yZXBsYWNlKC9cXFsoWzAtOV0qKV0vZ2ltLCAnLiQxJykuc3BsaXQoJy4nKTtcbiAgICAgICAgcmV0dXJuIHBhdGhBYXJyYXkucmVkdWNlKChwcmV2OiBhbnksIG5leHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmV2W25leHRdO1xuICAgICAgICB9LCBkYXRhKTtcbiAgICB9XG5cbn1cbiJdfQ==